<?xml version="1.0" encoding="UTF-8"?>
<effects path="data/effects/" extensions="xml">
  <shaders>
    <vertex_shaders path="data/shaders/" extensions="vs"/>
    <tesselation_control_shaders path="data/shaders/" extensions="tc"/>
    <tesselation_evaluation_shaders path="data/shaders/" extensions="te"/>
    <geometry_shaders path="data/shaders/" extensions="gs"/>
    <fragment_shaders path="data/shaders/" extensions="fs"/>
  </shaders>
  
  <effect name="BasicEffect"></effect>
  <effect name="WhiteEffect"></effect>
  <effect name="ColorEffect"></effect>
  
  
  
  
  <!--
  <technique type="" quality="">
    types:
    -> "forward"
    -> "shadow"
    -> "particle"
    -> "deferred"
    
    qualities. Si es demana una inexistent, es cau cap avall. Per defecte és "none"
    -> "none"
    -> "low"
    -> "mid"
    -> "hight"
    -> "ultra"
        
    <min_version>GL2</min_version>       -> GL2, GL3, GL4, GLSL2
    <pass>
      <render_states>
        <depth_test>true</depth_test>
        <depth_function>LESS</depth_function> -> LESS, GREATER, EQUAL, NOTEQUAL, LEQUAL, GEQUAL, ALWAYS, NEVER
        <z_write>true</z_write>
        
        <alpha_blending render_target="">false</alpha_blending> -> render_target o bé res, o bé 0, 1, 2, ...
        <blend_func render_target="">
          <source>SRC_ALPHA</source>
          <destination>ONE_MINUS_SRC_ALPHA</destination>
          
          - -
          <source_color>SRC_ALPHA</source_color>
          <destination_color>ONE_MINUS_SRC_ALPHA</destination_color>
          <source_alpha>ONE</source_alpha>
          <destination_alpha>ZERO</destination_alpha>
          
          
        </blend_func>  -> ZERO, ONE, 
                          SRC_COLOR, SRC_ALPHA, DST_ALPHA, DST_COLOR, 
                          SRC_ALPHA_SATURATE, CONSTANT_COLOR, CONSTANT_ALPHA,
                          ONE_MINUS_SRC_COLOR, ONE_MINUS_SRC_ALPHA,
                          ONE_MINUS_DST_COLOR, ONE_MINUS_DST_ALPHA, 
                          //ONE_MINUS_CONSTANT_COLOR, ONE_MINUS_CONSTANT_ALPHA,
                          SRC1_ALPHA, ONE_MINUS_SRC1_ALPHA;
                          
          color_final.rgb = color_fragment.rgb * source_color + color_anterior.rgb * destination_color;
          color_final.a   = color_fragment.a   * source_alpha + color_anterior.a   * destination_alpha;                
          
      </render_states>
      
      <attributes>
        <position/> -> vec3 a_v3Position               (0)
        <normal/>   -> vec3 a_v3Normal                 (1)
        <tangents/> -> vec3 a_v3Tangent, a_v3Bitangent (2/3)
        <uv/>       -> vec2 a_v2UV                     (4)
        <bones/>    -> ivec4 a_i4BlendIndexs           (5)
                        vec4 a_v4BlendWeights          (6)
        <color/>    -> vec4 a_v4Color                  (7) 
      </attributes>
      
      <uniforms>
        <albedo_texture/>          -> sampler2D u_s2Albedo 
        <normal_texture/>          -> sampler2D u_s2Normalmap 
        <height_texture/>          -> sampler2D u_s2Heightmap 
        <basic_instance_uniforms/> -> UniformInstances { m44ModelViewProjection, m44ModelView  } u_InstanceInfo[instances] 
        <special_colors/>          -> SpecialColors { u_v4SpecialColor0, u_v4SpecialColor1, u_v4SpecialColor2, u_v4SpecialColor3 } u_ColorInfo[instances] 
        
        <basic_light/>             -> UniformLight { u_v3AmbientLight, u_v3DirectionalLightDirection, u_v3DirectionalLightColor } 
        <basic_material/>          -> UniformMaterials { u_fSpecularFactor, u_fGlossiness, u_fHeight } 
      </uniforms>
      
      <results>
        <color/> <!- - vec4 f_v4Color - ->
        <depth/> <!- - vec4 f_v4Depth - ->
      </results>
      
          
      <vertex_shader>
        <resource>vertex_shader</resource> -> ./data/shaders/vertex_shader.vs
        <define>ANIMATED</define> -> afegeix "#define ANIMATED" al principi del shader
        <define>TANGENTS</define>
        <define>PARALLAX</define>
      </vertex_shader>
      <fragment_shader>
        <resource>fragment_shader</resource> -> ./data/shaders/fragment_shader.vs
      </fragment_shader>
    </pass>
  </technique>
  
  
  *************************************************************************************************
  
  <technique type="" quality="" external="true" ref_effect="" ref_type="" ref_quality=""/>
  
  -->
</effects>
